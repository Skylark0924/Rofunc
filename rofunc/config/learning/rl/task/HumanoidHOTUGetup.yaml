# used to create the object
name: HumanoidHOTUGetup

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym.
env:
  numEnvs: ${resolve_default:4096,${...num_envs}}
  envSpacing: 5
  episodeLength: 300
  cameraFollow: False # if the camera follows humanoid or not
  isFlagrun: False
  enableDebugVis: False
  
  pdControl: True
  powerScale: 1.0
  controlFrequencyInv: 2 # 30 Hz
  collisionFilter: -1 # -1: collision defined by MJCF, 0: all collision detection, 1: no collision detection
  stateInit: "Hybrid"
  hybridInitProb: 0.5
  numAMPObsSteps: 2
  recoveryEpisodeProb: 0.2
  recoverySteps: 60
  fallInitProb: 0.1

  localRootObs: True
  keyBodies:
  contactBodies:
  terminationHeight: 0.15
  enableEarlyTermination: True
  charHeight: 1.0
  headRbName: "head"

  # animation files to learn from
  motion_file:
  use_extra_dof_states_motion: False
  extra_rewrite_dof_names:

  motion_file_asset:
  right_left_ids_except_thumb_and_knuckle:
  right_left_thumb_knuckle_ids:


  object_motion_file:

  asset:
    assetFileName:

  use_object_motion: False
  object_asset:
    assetName:         # List of object names, also used for finding objects in object_motion_file, if the name is box or sphere, it will be created as a box or sphere
    assetFileName:     # List of object asset file path
    assetSize:        # List of object size, used for scaling the object and creating the box objects

  plane:
    staticFriction: 1.0
    dynamicFriction: 1.0
    restitution: 0.0

sim:
  dt: 0.0166 # 1/60 s
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 0
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 10.0
    default_buffer_size_multiplier: 10.0
    num_subscenes: ${....num_subscenes}
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)
    max_gpu_contact_pairs: 8388608 # 8*1024*1024

  flex:
    num_inner_iterations: 10
    warm_start: 0.25

task:
  randomize: False
  randomization_params:
    # specify which attributes to randomize for each actor type and property
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [ 0, .002 ] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [ 0., .02 ]
      operation: "additive"
      distribution: "gaussian"
    sim_params:
      gravity:
        range: [ 0, 0.4 ]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      humanoid:
        color: True
        rigid_body_properties:
          mass:
            range: [ 0.5, 1.5 ]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [ 0.7, 1.3 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [ 0., 0.7 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping:
            range: [ 0.5, 1.5 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness:
            range: [ 0.5, 1.5 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [ 0, 0.01 ]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [ 0, 0.01 ]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000

  # ========= HOTU-2 parameters ==========
  wb_decompose: False  # if True, decompose the whole body into parts
  wb_decompose_parameter:
    parts: [ "body" ]
  #    body:
  #      rb_ids: [ 0, 1, 2, 3, 4, 20, 21, 22, 38, 39, 40, 41, 42, 43 ]  # length: 14, except pelvis
  #      rb_names: [ "torso", "head", "right_upper_arm", "right_lower_arm", "right_hand", "left_upper_arm", "left_lower_arm", "left_hand", "right_thigh", "right_shin", "right_foot", "left_thigh", "left_shin", "left_foot" ]
  #      dof_ids: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 28, 29, 30, 31, 32, 33, 34, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 ] # length: 34
  #    hands:
  #      rb_ids: [ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 ]  # length: 30
  #      rb_names: [ "right_qbhand_thumb_knuckle_link", "right_qbhand_thumb_proximal_link", "right_qbhand_thumb_distal_link", "right_qbhand_index_proximal_link", "right_qbhand_index_middle_link", "right_qbhand_index_distal_link", "right_qbhand_middle_proximal_link", "right_qbhand_middle_middle_link", "right_qbhand_middle_distal_link", "right_qbhand_ring_proximal_link", "right_qbhand_ring_middle_link", "right_qbhand_ring_distal_link", "right_qbhand_little_proximal_link", "right_qbhand_little_middle_link", "right_qbhand_little_distal_link", "left_qbhand_thumb_knuckle_link", "left_qbhand_thumb_proximal_link", "left_qbhand_thumb_distal_link", "left_qbhand_index_proximal_link", "left_qbhand_index_middle_link", "left_qbhand_index_distal_link", "left_qbhand_middle_proximal_link", "left_qbhand_middle_middle_link", "left_qbhand_middle_distal_link", "left_qbhand_ring_proximal_link", "left_qbhand_ring_middle_link", "left_qbhand_ring_distal_link", "left_qbhand_little_proximal_link", "left_qbhand_little_middle_link", "left_qbhand_little_distal_link" ]
  #      dof_ids: [ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 ] # length: 30
  #    body:
  #      rb_ids: [ 0, 1, 2, 3, 4, 38, 39, 40, 74, 75, 76, 77, 78, 79 ]  # length: 14, except pelvis
  #      rb_names: [ "torso", "head", "right_upper_arm", "right_lower_arm", "right_hand", "left_upper_arm", "left_lower_arm", "left_hand", "right_thigh", "right_shin", "right_foot", "left_thigh", "left_shin", "left_foot" ]
  #      dof_ids: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 46, 47, 48, 49, 50, 51, 52, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 ] # length: 34
  #    hands:
  #      rb_ids: [ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73 ]  # length: 60
  #      rb_names: [ "right_qbhand_thumb_knuckle_link", "right_qbhand_thumb_proximal_link", "right_qbhand_thumb_distal_link", "right_qbhand_index_proximal_link", "right_qbhand_index_middle_link", "right_qbhand_index_distal_link", "right_qbhand_middle_proximal_link", "right_qbhand_middle_middle_link", "right_qbhand_middle_distal_link", "right_qbhand_ring_proximal_link", "right_qbhand_ring_middle_link", "right_qbhand_ring_distal_link", "right_qbhand_little_proximal_link", "right_qbhand_little_middle_link", "right_qbhand_little_distal_link", "left_qbhand_thumb_knuckle_link", "left_qbhand_thumb_proximal_link", "left_qbhand_thumb_distal_link", "left_qbhand_index_proximal_link", "left_qbhand_index_middle_link", "left_qbhand_index_distal_link", "left_qbhand_middle_proximal_link", "left_qbhand_middle_middle_link", "left_qbhand_middle_distal_link", "left_qbhand_ring_proximal_link", "left_qbhand_ring_middle_link", "left_qbhand_ring_distal_link", "left_qbhand_little_proximal_link", "left_qbhand_little_middle_link", "left_qbhand_little_distal_link" ]
  #      dof_ids: [ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85 ] # length: 60


  use_synergy: True  # if True, use the synergy for the hand
