# ========== Trainer parameters ==========
Trainer:
  experiment_name:                    # Experiment name for logging.
  experiment_directory:               # Experiment directory for logging.
  write_interval: 100                 # TensorBoard write interval for logging. (timesteps)
  checkpoint_interval: 1000           # Checkpoint interval for logging. (timesteps)
  wandb: False                        # If true, log to Weights & Biases.
  wandb_kwargs:                       # Weights & Biases kwargs. https://docs.wandb.ai/ref/python/init
    project:                          # Weights & Biases project name.
  rofunc_logger_kwargs:               # Rofunc BeautyLogger kwargs.
    verbose: True                     # If true, print to stdout.
  maximum_steps: 100000               # The maximum number of steps to run for.
  random_steps: 0                     # The number of random exploration steps to take.
  start_learning_steps: 0             # The number of steps to take before starting network updating.
  seed: 42                            # The random seed.
  rollouts: 16                        # The number of rollouts before updating.
  eval_flag: False                     # If true, run evaluation.
  eval_freq: 2500                     # The frequency of evaluation. (timesteps)
  eval_steps: 1000                    # The number of steps to run for evaluation.
  use_eval_thread: True               # If true, use a separate thread for evaluation.
  inference_steps: 1000               # The number of steps to run for inference.
  max_episode_steps: 200              # The maximum number of steps per episode.


# ========== Agent parameters ==========
Agent:
  discount: 0.99                      # The discount factor, gamma.
  td_lambda: 0.95                     # TD(lambda) coefficient (lam) for computing returns and advantages.

  learning_epochs: 8                 # The number of epochs to train for per update.
  mini_batch_size: 8                 # The number of samples per update.

  lr_a: 5e-4                        # Learning rate for actor.
  lr_c: 5e-4                        # Learning rate for critic.
#  lr_scheduler:                    # Learning rate scheduler type.
#  lr_scheduler_kwargs:             # Learning rate scheduler kwargs.
  adam_eps: 1e-5                    # Adam epsilon.

  # If true, use the Generalized Advantage Estimator (GAE)
  # with a value function, see https://arxiv.org/pdf/1506.02438.pdf.
  use_gae: True

  entropy_loss_scale: 0.01         # entropy loss scaling factor
  value_loss_scale: 2.0            # value loss scaling factor

  grad_norm_clip: 1.0              # clipping coefficient for the norm of the gradients
  ratio_clip: 0.2                  # clipping coefficient for computing the clipped surrogate objective
  value_clip: 0.2                  # clipping coefficient for computing the value loss (if clip_predicted_values is True)
  clip_predicted_values: True      # clip predicted values during value loss computation

  kl_threshold: 0                  # Initial coefficient for KL divergence.

#  state_preprocessor:            # State preprocessor type.
#  state_preprocessor_kwargs:     # State preprocessor kwargs.
#  value_preprocessor:            # Value preprocessor type.
#  value_preprocessor_kwargs:     # Value preprocessor kwargs.
#  rewards_shaper:                # Rewards shaper type.


# ========= Model parameters ==========
Model:
  use_init: True
  use_action_clip: False               # If true, clip actions to the action space range.
  use_action_out_tanh: True            # If true, apply tanh to the output of the actor.
  action_clip: 1.0                     # clipping coefficient for the norm of the actions
  action_scale: 1.0                    # scaling action range from [-1, 1] after tanh to [-action_scale, action_scale]
  use_log_std_clip: True               # If true, clip log standard deviations to the range [-20, 2].
  log_std_clip_max: 2.0                # clipping coefficient for the log standard deviations
  log_std_clip_min: -20                # clipping coefficient for the log standard deviations

  actor:
    type: "Gaussian"  # ["Beta", "Gaussian"]
    mlp_hidden_dims: [ 512, 256, 128 ]
    mlp_activation: elu
    use_lstm: false
    lstm_cell_size: 256
    lstm_use_prev_action: false
    lstm_use_prev_reward: false
    max_seq_len: 20

  critic:
    mlp_hidden_dims: [ 512, 256, 128 ]
    mlp_activation: elu
    use_lstm: false
    lstm_cell_size: 256
    lstm_use_prev_action: false
    lstm_use_prev_reward: false
    max_seq_len: 20

